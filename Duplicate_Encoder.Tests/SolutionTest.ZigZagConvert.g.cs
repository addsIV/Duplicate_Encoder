using Microsoft.Pex.Framework.Generated;
using Microsoft.VisualStudio.TestTools.UnitTesting;
// <copyright file="SolutionTest.ZigZagConvert.g.cs">Copyright ©  2020</copyright>
// <auto-generated>
// 這個檔案包含自動產生的測試。
// 請勿手動修改這個檔案。
// 
// 如果這個檔案的內容過期，可將它刪除。
// 例如，如果內容不再編譯。
// </auto-generated>
using System;

namespace Duplicate_Encoder.Tests
{
    public partial class SolutionTest
    {

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        public void ZigZagConvert106()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, (string)null, 0);
            Assert.IsNotNull((object)solution);
            Assert.AreEqual<bool>(false, solution.res);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        public void ZigZagConvert330()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "", 0);
            Assert.IsNotNull((object)solution);
            Assert.AreEqual<bool>(false, solution.res);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        public void ZigZagConvert514()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0", 0);
            Assert.IsNotNull((object)solution);
            Assert.AreEqual<bool>(false, solution.res);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        public void ZigZagConvert856()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0", 1);
            Assert.IsNotNull((object)solution);
            Assert.AreEqual<bool>(false, solution.res);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        public void ZigZagConvert338()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0\0", 128);
            Assert.IsNotNull((object)solution);
            Assert.AreEqual<bool>(false, solution.res);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        [ExpectedException(typeof(IndexOutOfRangeException))]
        public void ZigZagConvertThrowsIndexOutOfRangeException384()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0\0", 0);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        [PexRaisedException(typeof(OverflowException))]
        public void ZigZagConvertThrowsOverflowException974()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0\0", int.MinValue);
        }

        [TestMethod]
        [PexGeneratedBy(typeof(SolutionTest))]
        [ExpectedException(typeof(OverflowException))]
        public void ZigZagConvertThrowsOverflowException97401()
        {
            Solution solution;
            string s;
            solution = new Solution();
            solution.res = false;
            s = this.ZigZagConvert(solution, "\0\0", int.MinValue);
        }
    }
}
